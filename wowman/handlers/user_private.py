from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f, Filter
from database.orm_query import orm_get_products
from kbds import reply
from sqlalchemy.ext.asyncio import AsyncSession
from kbds.inline import get_callback_btns, get_inlineMix_btns
from kbds.reply import get_keyboard
user_private_router = Router()



@user_private_router.message(or_f(CommandStart(), Command('keyboard')))
async def start_cmd(message: types.Message, session: AsyncSession):
    # for product in await orm_get_products(session):
    #     list_category.append(product.category)
    # print(list_category)
    await message.answer('–¢—É—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫–æ–π –ª–∏–±–æ ‚Ññ3', reply_markup=reply.start_kb)

# @user_private_router.message(Command('keyboard'))
# async def start_cmd(message: types.Message):
#     await message.answer(reply_markup=reply.start_kb)

@user_private_router.message(Command('about'))
async def about_cmd(message: types.Message):
    
    await message.answer('–ó–¥–µ—Å—å —É–∂–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å')

@user_private_router.message(Command('bot_info'))
async def bot_cmd(message: types.Message):
    
    await message.answer(f'üß∞–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –±–æ—Ç–∞: @Grozny_boss', reply_markup=get_inlineMix_btns(
        btns={
            "–ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ü§ñ": "https://t.me/Grozny_boss",
            "–ö–∞–Ω–∞–ªüì∞": "https://t.me/grozny_boss_blog",
        }
    ))


# @user_private_router.message(F.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤')
# async def all_product(message: types.Message, session: AsyncSession):
#     for product in await orm_get_products(session):
#         await message.answer_photo(
#             product.image,
#             caption=f"<strong>{product.name}\
#                     </strong>\n{product.description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {round(product.price, 2)}",
#             reply_markup=get_callback_btns(
#                 btns={
#                     "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
#                     "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
#                 }
#             ),
#         )
#     await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚è´")

    
# @user_private_router.message(F.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤')
# async def all_category(message: types.Message, session: AsyncSession):
#     btns = {}
#     for product in await orm_get_products(session):
#         btns.update({f"{product.category}": f"text_{product.category}"})
     
#     await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚è¨',  reply_markup=get_callback_btns( btns=btns ),)
    

@user_private_router.message(F.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤')
async def all_category(message: types.Message, session: AsyncSession):
    list = []
    for product in await orm_get_products(session):
        list.append(f"{product.category}")
     
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚è¨',  reply_markup=get_keyboard( *list ),)

@user_private_router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def back(message: types.Message, session: AsyncSession):
    list = []
    for product in await orm_get_products(session):
        list.append(f"{product.category}")
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ ‚è¨', reply_markup=get_keyboard( *list ))    








@user_private_router.message(or_f(F.text.contains('–ê–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã') ))
@user_private_router.message(or_f(F.text.contains('–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å') ))
@user_private_router.message(or_f(F.text.contains('–î–µ—Ç–æ–∫—Å') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –∂–µ–Ω—â–∏–Ω') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –ñ–ö–¢') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –∫–æ–∂–∏, –≤–æ–ª–æ—Å, –Ω–æ–≥—Ç–µ–π') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –ª–µ–≥–∫–∏—Ö') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –º–æ–∑–≥–∞') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –º—É–∂—á–∏–Ω') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –Ω–µ—Ä–≤–æ–≤') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –ø–µ—á–µ–Ω–∏') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è –ø–æ—á–µ–∫') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è —Å–ø–æ—Ä—Ç–∞') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è —Å—É—Å—Ç–∞–≤–æ–≤') ))
@user_private_router.message(or_f(F.text.contains('–î–ª—è —Ñ–∏–≥—É—Ä—ã') ))
@user_private_router.message(or_f(F.text.contains('–û—Ç –≤–∞—Ä–∏–∫–æ–∑–∞') ))
@user_private_router.message(or_f(F.text.contains('–û—Ç –¥–∞–≤–ª–µ–Ω–∏—è') ))
@user_private_router.message(or_f(F.text.contains('–°—É–ø–µ—Ä—Ñ—É–¥—ã') ))
@user_private_router.message(or_f(F.text.contains('–ß–∞–π') ))
@user_private_router.message(or_f(F.text.contains('–°–ø–µ—Ü–∏–∏') ))
@user_private_router.message(or_f(F.text.contains('–ò–Ω—Ç–∏–º–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞') ))
async def product_category(message: types.Message, session: AsyncSession):
    
    for product in await orm_get_products(session):
        if message.text == product.category: 
            await message.answer_photo(
                product.image,
                    caption=f"<strong>{product.name}\
                        </strong>\n{product.description}",
                reply_markup=get_inlineMix_btns(
                    btns={
                        "–¢–æ–≤–∞—Ä –Ω–∞ OZONüõí": f"{product.ozon_url}",
                        "–¢–æ–≤–∞—Ä –Ω–∞ WILDBERRIESüõí": f"{product.wildb_url}",
                    }
                ), parse_mode='HTML'
            )
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚è´", reply_markup=get_keyboard(
            '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'

        ))   
 